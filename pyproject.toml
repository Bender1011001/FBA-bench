[build-system]
requires = ["poetry-core>=1.9.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "fba-bench"
version = "0.1.0"
description = "FBA-Bench: A benchmarking and simulation framework for financial/business agents"
authors = ["FBA-Bench Maintainers <maintainers@example.com>"]
readme = "README.md"
license = "Apache-2.0"
packages = [
  { include = "fba_bench" },
  { include = "fba_bench_api" },
  { include = "agent_runners" },
  { include = "benchmarking" },
  { include = "integration" },
  { include = "observability" },
  { include = "services" }
]

# Pin a conservative Python range compatible with repo/test references (e.g., tests assume 3.9.0)
# and modern libs. Adjust if CI targets differ.
[tool.poetry.dependencies]
python = ">=3.9,<3.13"

# Web/API
fastapi = "^0.115.0"
uvicorn = { version = "^0.30.0", extras = ["standard"] }

# Data / parsing / IO
pydantic = "^2.8.0"
pydantic-settings = "^2.5.0"
pyyaml = "^6.0.1"
python-dotenv = "^1.0.1"
requests = "^2.32.3"
httpx = "^0.27.0"

# Async / backoff / concurrency utilities
anyio = "^4.4.0"
tenacity = "^9.0.0"

# Logging
loguru = "^0.7.2"
python-json-logger = "^3.2.1"

# Observability (kept optional at runtime; installed by default for ease)
opentelemetry-api = "^1.25.0"
opentelemetry-sdk = "^1.25.0"
opentelemetry-instrumentation-fastapi = "^0.46b0"
opentelemetry-exporter-otlp = "^1.25.0"

# Serialization / validation safety
ujson = "^5.10.0"

# Common scientific stack (some components in repo may expect them)
numpy = "^1.26.4"
pandas = "^2.2.2"

# Optional LLM ecosystem (used across runners; do not hard-pin, allow user to trim as needed)
openai = "^1.40.0"
anthropic = "^0.34.0"
langchain = "^0.3.7"
langchain-community = "^0.3.7"
langchain-openai = "^0.2.7"
langchain-anthropic = "^0.2.4"

# CLI helpers if needed
typer = { version = "^0.12.3", optional = true }

[tool.poetry.group.dev.dependencies]
black = "^24.8.0"
isort = "^5.13.2"
flake8 = "^7.1.1"
mypy = "^1.11.1"
ruff = "^0.6.9"
pytest = "^8.3.2"
pytest-asyncio = "^0.23.8"
pytest-cov = "^5.0.0"
httpx = "^0.27.0"
coverage = "^7.6.1"
types-PyYAML = "^6.0.12.20240808"
types-requests = "^2.32.0.20240712"
pre-commit = "^4.0.1"

[tool.black]
line-length = 100
target-version = ["py39", "py310", "py311", "py312"]
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | \.venv-1
  | build
  | dist
  | frontend
)/
'''

[tool.isort]
profile = "black"
line_length = 100
skip = ["frontend", ".venv", ".venv-1"]

[tool.flake8]
max-line-length = 100
extend-ignore = ["E203", "W503"]
exclude = [".git", "__pycache__", "build", "dist", "frontend", ".venv", ".venv-1"]

[tool.mypy]
python_version = "3.9"
strict = false
warn_unused_ignores = true
warn_redundant_casts = true
warn_unreachable = true
disallow_untyped_defs = false
exclude = '(frontend|\.venv|\.venv-1|build|dist)'
plugins = []

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra -q --cov=fba_bench --cov=fba_bench_api --cov=agent_runners --cov-report=term-missing"
testpaths = ["tests", "frontend/src"]
asyncio_mode = "auto"

[tool.ruff]
line-length = 100
target-version = "py39"
exclude = ["frontend", ".venv", ".venv-1", "build", "dist"]
lint.select = [
  "E", "F", "I", "UP", "B", "SIM", "C4", "PIE", "ARG", "PTH", "RUF"
]
lint.ignore = [
  "E203",  # whitespace before ':'
  "E501"   # handled by formatter
]

[tool.coverage.run]
branch = true
source = [
  "fba_bench",
  "fba_bench_api",
  "agent_runners",
  "benchmarking",
  "integration",
  "observability",
  "services"
]
omit = ["*/tests/*", "frontend/*"]

[tool.coverage.report]
show_missing = true
skip_covered = true
precision = 2

[tool.poetry.scripts]
fba-bench-lint = "ruff.__main__:main"
fba-bench-format = "black:main"
fba-bench-test = "pytest:main"