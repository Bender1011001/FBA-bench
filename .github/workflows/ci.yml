name: CI

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  test:
    name: Backend and Frontend Tests (Py${{ matrix.python-version }} â€¢ ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        run: python -m pip install --upgrade pip && pip install poetry

      - name: Install backend dependencies (Poetry)
        run: poetry install --with dev --no-interaction --no-ansi

      - name: Python version
        run: python -V

      - name: Run backend tests (pytest + coverage)
        run: poetry run pytest

      - name: Upload pytest cache and coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-logs-${{ matrix.os }}-${{ matrix.python-version }}
          path: |
            .pytest_cache/**
            **/pytest*.xml
            htmlcov/**
          if-no-files-found: ignore

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Run frontend tests
        working-directory: frontend
        run: npm test -- --run

      - name: Build frontend (production)
        working-directory: frontend
        run: npm run build

  docker:
    name: Docker Build and Healthcheck
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build API image
        run: docker build -t fba-bench:ci .

      - name: Run container
        run: docker run -d --rm -p 8000:8000 --name fba-bench fba-bench:ci

      - name: Wait for health endpoint
        run: |
          for i in {1..20}; do
            if curl -fsS http://localhost:8000/api/v1/health > /dev/null; then
              echo "Healthy"
              exit 0
            fi
            sleep 3
          done
          echo "Health check failed"
          docker logs fba-bench || true
          exit 1

      - name: Stop container
        if: always()
        run: docker stop fba-bench