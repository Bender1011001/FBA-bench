"""
Event and command definitions related to marketing and market trends in the FBA-Bench simulation.

This module defines events that inform agents about broad market shifts or
specific marketing-related actions. It includes:
- `MarketTrendEvent`: Signals significant changes in market dynamics (e.g., price trends, demand shifts).
- `RunMarketingCampaignCommand`: An agent-issued command to initiate a marketing campaign.

These elements are crucial for enabling agents to adapt to market conditions
and influence product visibility and demand through strategic marketing efforts.
"""
from __future__ import annotations
from dataclasses import dataclass, field
from datetime import datetime, timedelta
from typing import Dict, Any, Optional, List, Tuple
from .base import BaseEvent
from money import Money # External dependency for precise financial calculations

@dataclass
class MarketTrendEvent(BaseEvent):
    """
    Signals the occurrence of a significant market trend or change.
    
    This event is generated by the simulation's market model or a `MarketAnalyzerService`.
    It informs agents about shifts in the market that could impact their strategy,
    such as changes in overall demand, pricing patterns, or competitor activity.
    
    Attributes:
        event_id (str): Unique identifier for this market trend event. Inherited from `BaseEvent`.
        timestamp (datetime): When the market trend was detected or became significant. Inherited from `BaseEvent`.
        trend_type (str): The category of the trend, e.g., "price", "demand", "competitor",
                          "seasonal_shift", "regulatory_change".
        trend_direction (str): The direction of the trend: "up", "down", or "stable".
        magnitude (float): The strength or intensity of the trend, normalized from 0.0 (weak) to 1.0 (very strong).
        affected_products (List[str]): A list of product ASINs specifically affected by this trend.
                                       If empty, the trend is generally applicable.
        confidence_level (float): A normalized score (0.0 to 1.0) indicating the simulation's confidence
                                  in the accuracy or persistence of this trend. Defaults to 0.5.
        duration_estimate (str): An estimated duration for how long the trend is expected to last,
                                 e.g., "short-term", "medium-term", "long-term", or "unknown".
                                 Defaults to "unknown".
        market_data (Dict[str, Any]): A dictionary containing supporting raw or processed market data
                                     that provides context for the trend.
    """
    trend_type: str
    trend_direction: str
    magnitude: float
    affected_products: List[str] = field(default_factory=list)
    confidence_level: float = 0.5
    duration_estimate: str = "unknown"
    market_data: Dict[str, Any] = field(default_factory=dict)
    
    def __post_init__(self):
        """
        Validates the attributes of the `MarketTrendEvent` upon initialization.
        Ensures trend type and direction are valid, and scores/magnitudes are within range.
        """
        super().__post_init__() # Call base class validation
        
        # Validate trend_type: Must be a non-empty string.
        if not self.trend_type:
            raise ValueError("Trend type cannot be empty for MarketTrendEvent.")
        
        # Validate trend_direction: Must be one of the predefined categories.
        if self.trend_direction not in ["up", "down", "stable"]:
            raise ValueError(f"Trend direction must be 'up', 'down', or 'stable', but got '{self.trend_direction}' for MarketTrendEvent.")
        
        # Validate magnitude: Must be within the range [0.0, 1.0].
        if not 0.0 <= self.magnitude <= 1.0:
            raise ValueError(f"Magnitude must be between 0.0 and 1.0, but got {self.magnitude} for MarketTrendEvent.")
        
        # Validate confidence_level: Must be within the range [0.0, 1.0].
        if not 0.0 <= self.confidence_level <= 1.0:
            raise ValueError(f"Confidence level must be between 0.0 and 1.0, but got {self.confidence_level} for MarketTrendEvent.")
    
    def to_summary_dict(self) -> Dict[str, Any]:
        """
        Converts the `MarketTrendEvent` into a concise summary dictionary.
        Magnitude and confidence levels are rounded for readability.
        """
        return {
            'event_id': self.event_id,
            'timestamp': self.timestamp.isoformat(),
            'trend_type': self.trend_type,
            'trend_direction': self.trend_direction,
            'magnitude': round(self.magnitude, 3),
            'affected_products_count': len(self.affected_products), # Summarize by count
            'confidence_level': round(self.confidence_level, 3),
            'duration_estimate': self.duration_estimate,
            'market_data': self.market_data # Include full data as it's often small and important
        }

@dataclass
class RunMarketingCampaignCommand(BaseEvent):
    """
    Represents an agent's command to initiate a marketing campaign.
    
    This command is issued by agents (e.g., a `MarketingSkill`) to influence
    product awareness, demand, or brand perception within the simulation.
    It specifies the type of campaign, the budget allocated, and its duration.
    
    Attributes:
        event_id (str): Unique identifier for this marketing campaign command. Inherited from `BaseEvent`.
        timestamp (datetime): When the campaign command was issued by the agent. Inherited from `BaseEvent`.
        campaign_type (str): The type of marketing campaign, e.g., "social_media_ads", "display_ads",
                             "email_marketing", "influencer_partnership", "discount_promotion".
        budget (Money): The total financial budget allocated for this marketing campaign.
                        Represented using the `Money` class. Must be positive.
        duration_days (int): The planned duration of the campaign in simulation days. Must be positive.
        reason (Optional[str]): An optional, human-readable reason or justification for running the campaign.
                                Useful for auditing and understanding agent behavior.
    """
    campaign_type: str
    budget: Money
    duration_days: int
    reason: Optional[str] = None

    def __post_init__(self):
        """
        Validates the attributes of the `RunMarketingCampaignCommand` upon initialization.
        Ensures campaign type is provided, and budget/duration are valid.
        """
        super().__post_init__() # Call base class validation
        
        # Validate campaign_type: Must be a non-empty string.
        if not self.campaign_type:
            raise ValueError("Campaign type cannot be empty for RunMarketingCampaignCommand.")
        
        # Validate budget: Must be a Money object and positive.
        if not isinstance(self.budget, Money):
            raise TypeError(f"Budget must be a Money object, but got {type(self.budget)} for RunMarketingCampaignCommand.")
        if self.budget.cents <= 0:
            raise ValueError(f"Budget must be positive, but got {self.budget} for RunMarketingCampaignCommand.")
        
        # Validate duration_days: Must be a positive integer.
        if self.duration_days <= 0:
            raise ValueError(f"Duration days must be positive, but got {self.duration_days} for RunMarketingCampaignCommand.")

    def to_summary_dict(self) -> Dict[str, Any]:
        """
        Converts the `RunMarketingCampaignCommand` into a concise summary dictionary.
        `Money` objects are converted to string representation.
        """
        return {
            'event_id': self.event_id,
            'timestamp': self.timestamp.isoformat(),
            'agent_id': getattr(self, 'agent_id', 'N/A'), # Assuming agent_id might be set by publisher or agent itself
            'campaign_type': self.campaign_type,
            'budget': str(self.budget),
            'duration_days': self.duration_days,
            'reason': self.reason
        }


@dataclass
class AdSpendEvent(BaseEvent):
    """
    Signals simulated advertising spend and exposure for a campaign on a specific ASIN.

    Published by MarketingService each tick for active campaigns.

    Attributes:
        event_id (str): Unique identifier for this ad spend event.
        timestamp (datetime): When the spend was realized in the simulation.
        asin (str): Target product ASIN.
        campaign_id (str): Identifier of the campaign (may reuse the RunMarketingCampaignCommand.event_id).
        spend (Money): Money spent during the tick.
        clicks (int): Estimated clicks generated.
        impressions (int): Estimated impressions generated.
    """
    asin: str
    campaign_id: str
    spend: Money
    clicks: int
    impressions: int

    def __post_init__(self):
        super().__post_init__()
        if not self.asin or not isinstance(self.asin, str):
            raise ValueError("AdSpendEvent.asin must be a non-empty string")
        if not self.campaign_id or not isinstance(self.campaign_id, str):
            raise ValueError("AdSpendEvent.campaign_id must be a non-empty string")
        if not isinstance(self.spend, Money):
            raise TypeError("AdSpendEvent.spend must be a Money instance")
        if self.spend.cents < 0:
            raise ValueError("AdSpendEvent.spend cannot be negative")
        if self.clicks < 0 or self.impressions < 0:
            raise ValueError("AdSpendEvent.clicks/impressions must be >= 0")

    def to_summary_dict(self) -> Dict[str, Any]:
        return {
            'event_id': self.event_id,
            'timestamp': self.timestamp.isoformat(),
            'asin': self.asin,
            'campaign_id': self.campaign_id,
            'spend': str(self.spend),
            'clicks': self.clicks,
            'impressions': self.impressions,
        }
